
import numpy as np


def write_gro_file(filename: str, 
                   coordinates: np.ndarray,
                   box_size: float,
                   atomname: str = "C",
                   resname: str = "MOL",
                   title: str = "Generated by gro_writer") -> None:
    """
    Write a GRO format file with simplified inputs.
    
    Args:
        filename: Output .gro filename
        coordinates: Numpy array of shape (N, 3) containing x,y,z coordinates in nm
        box_size: Cubic box size in nm
        atomname: Name of all atoms (default: "C")
        resname: Name of all residues (default: "MOL")
        title: Title string
    """
    n_atoms = len(coordinates)
    
    with open(filename, 'w') as f:
        # Write title line
        f.write(f"{title}\n")
        
        # Write number of atoms
        f.write(f"{n_atoms}\n")
        
        # Write atom information
        for i, (x, y, z) in enumerate(coordinates, start=1):
            resid = 1
            atomid = i
            line = f"{resid:>5d}{resname:<5s}{atomname:>5s}{atomid:>5d}"
            line += f"{x:8.3f}{y:8.3f}{z:8.3f}"
            f.write(line + '\n')
        
        # Write box vectors (cubic box)
        f.write(f"{box_size:10.5f}{box_size:10.5f}{box_size:10.5f}\n")


def write_pdb_file(filename: str,
                   coordinates: np.ndarray,
                   box_size: float,
                   atomname: str = "C",
                   resname: str = "MOL",
                   title: str = "Generated by pdb_writer") -> None:
    """
    Write a PDB format file with simplified inputs.
    
    Args:
        filename: Output .pdb filename
        coordinates: Numpy array of shape (N, 3) containing x,y,z coordinates in nm
        box_size: Cubic box size in nm
        atomname: Name of all atoms (default: "C")
        resname: Name of all residues (default: "MOL")
        title: Title string
  
    PDB Format Reference:
    ATOM/HETATM (1-6)    Record name
    atom number (7-11)    Integer
    atom name (13-16)     Atom name
    alt loc (17)          Alternate location indicator
    residue name (18-20)  Residue name
    chain (22)            Chain identifier
    residue number (23-26) Integer
    x (31-38)            Real(8.3) Orthogonal coordinates for X
    y (39-46)            Real(8.3) Orthogonal coordinates for Y
    z (47-54)            Real(8.3) Orthogonal coordinates for Z
    occupancy (55-60)     Real(6.2)
    temp factor (61-66)   Real(6.2)
    segment id (73-76)    Segment identifier
    element (77-78)       Element symbol
    charge (79-80)        Charge
    """
    # Convert nm to Angstroms for PDB format
    coords_ang = coordinates * 10.0
    box_ang = box_size * 10.0
    resid = 1
    
    with open(filename, 'w') as f:
        # Write title
        f.write(f"TITLE     {title}\n")
        f.write(f"REMARK    Generated by pdb_writer\n")
        
        # Write crystal structure (box size)
        # Format: CRYST1   50.000   50.000   50.000  90.00  90.00  90.00 P 1           1
        f.write(f"CRYST1{box_ang:9.3f}{box_ang:9.3f}{box_ang:9.3f}  90.00  90.00  90.00 P 1           1\n")
        
        # Write atom coordinates
        for i, (x, y, z) in enumerate(coords_ang, start=1):
            # Format each field according to PDB specifications
            record = "ATOM  "                    # cols 1-6
            serial = f"{i:5d}"                   # cols 7-11
            space1 = " "                         # col 12
            atom = f"{atomname:<4s}"             # cols 13-16
            alt_loc = " "                        # col 17
            res_name = f"{resname:<3s}"          # cols 18-20
            space2 = " "                         # col 21
            chain = "A"                          # col 22
            res_seq = f"{resid:4d}"             # cols 23-26
            ins_code = " "                       # col 27
            space3 = "   "                       # cols 28-30
            x_coord = f"{x:8.3f}"               # cols 31-38
            y_coord = f"{y:8.3f}"               # cols 39-46
            z_coord = f"{z:8.3f}"               # cols 47-54
            occupancy = f"{1.00:6.2f}"          # cols 55-60
            temp_factor = f"{0.00:6.2f}"        # cols 61-66
            space4 = "      "                    # cols 67-72
            segment = f"{resname:<4s}"           # cols 73-76
            element = f"{atomname:>2s}"          # cols 77-78
            charge = "  "                        # cols 79-80
            
            line = (f"{record}{serial}{space1}{atom}{alt_loc}{res_name}"
                   f"{space2}{chain}{res_seq}{ins_code}{space3}"
                   f"{x_coord}{y_coord}{z_coord}{occupancy}{temp_factor}"
                   f"{space4}{segment}{element}{charge}\n")
            
            f.write(line)
        
        # Write END record
        f.write("END\n")


def write_packmol_input(output_filename: str,
                        filenames: list[str],
                        box_size: float,
                        filetype: str = "pdb") -> None:
  with open("packmol_input.txt", "w") as f:
    f.write("tolerance 2.0\n")
    f.write(f"filetype {filetype}\n")
    f.write(f"output {output_filename}\n")
    for filename in filenames:
      f.write(f"""
structure {filename}
  number 1
  inside box 0 0 0 {box_size} {box_size} {box_size}
  resnumbers 2
end structure
      """)
      

def write_xyz_file(filename: str,
                   coordinates: np.ndarray,
                   atomname: str = "C") -> None:
  with open(filename, "w") as f:
    f.write(f"{len(coordinates)}\n")
    f.write(f"Generated by xyz_writer\n")
    for i, (x, y, z) in enumerate(coordinates, start=1):
      f.write(f"{atomname} {x} {y} {z}\n")